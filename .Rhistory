group_by(`Location of death (state)`) %>%
summarise(death_count=n())
runApp()
levels(censusData$race)
# make summary population figure for each state
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(population=sum(value, na.rm=TRUE))
# join w/ shapefile
states <- left_join(x = states, y = data, by="GEOID")
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/population.y*1000000), digits=1) %>%
filter(!is.na(death_count)) %>%
st_as_sf() %>%
st_transform(crs = "+init=epsg:4326")
runApp()
runApp()
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
# join w/ shapefile
states <- left_join(x = states, y = data, by="GEOID")
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/population.y*1000000), digits=1) %>%
filter(!is.na(death_count)) %>%
st_as_sf() %>%
st_transform(crs = "+init=epsg:4326")
pal <- colorBin(palette = "magma", domain = data$death_per_mil, bins = 5, reverse = TRUE,
na.color = "#808080")
labels <- sprintf("<strong>%s</strong><br/>%g deaths / million residents",
data$NAME.x, data$death_per_mil) %>% lapply(htmltools::HTML)
leaflet(data=data) %>%
addPolygons(fillOpacity = 0.7, dashArray = "3", color = "white", weight = 1.5,
fillColor = ~ pal(death_per_mil),
highlight = highlightOptions(
weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
addLegend("bottomleft", pal = pal, values = ~ death_per_mil, title = "deaths per million residents",
opacity = 1)
runApp()
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0))
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/population.y*1000000), digits=1)
mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/population.y*1000000), digits=1) %>%
filter(!is.na(death_count))
mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/population.y*1000000), digits=1)
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/population.y*1000000), digits=1)
mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/value*1000000), digits=1) %>%
filter(!is.na(death_count))
mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/value*1000000), digits=1)
censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
# join w/ shapefile
states <- left_join(x = states, y = data, by="GEOID")
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/value*1000000), digits=1) %>%
st_as_sf() %>%
st_transform(crs = "+init=epsg:4326")
pal <- colorBin(palette = "magma", domain = data$death_per_mil, bins = 5, reverse = TRUE,
na.color = "#808080")
labels <- sprintf("<strong>%s</strong><br/>%g deaths / million residents",
data$NAME.x, data$death_per_mil) %>% lapply(htmltools::HTML)
leaflet(data=data) %>%
addPolygons(fillOpacity = 0.7, dashArray = "3", color = "white", weight = 1.5,
fillColor = ~ pal(death_per_mil),
highlight = highlightOptions(
weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
addLegend("bottomleft", pal = pal, values = ~ death_per_mil, title = "deaths per million residents",
opacity = 1)
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
states <- left_join(x = states, y = data, by="GEOID")
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
right_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/value*1000000), digits=1) %>%
st_as_sf() %>%
st_transform(crs = "+init=epsg:4326")
pal <- colorBin(palette = "magma", domain = data$death_per_mil, bins = 5, reverse = TRUE,
na.color = "#808080")
labels <- sprintf("<strong>%s</strong><br/>%g deaths / million residents",
data$NAME.x, data$death_per_mil) %>% lapply(htmltools::HTML)
leaflet(data=data) %>%
addPolygons(fillOpacity = 0.7, dashArray = "3", color = "white", weight = 1.5,
fillColor = ~ pal(death_per_mil),
highlight = highlightOptions(
weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
addLegend("bottomleft", pal = pal, values = ~ death_per_mil, title = "deaths per million residents",
opacity = 1)
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n())
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0))
levels(states$STUSPS)
states <- st_read("tl_2015_us_state")
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
# join w/ shapefile
states <- left_join(x = states, y = data, by="GEOID")
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
left_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/value*1000000), digits=1) %>%
st_as_sf() %>%
st_transform(crs = "+init=epsg:4326")
pal <- colorBin(palette = "magma", domain = data$death_per_mil, bins = 5, reverse = TRUE,
na.color = "#808080")
labels <- sprintf("<strong>%s</strong><br/>%g deaths / million residents",
data$NAME.x, data$death_per_mil) %>% lapply(htmltools::HTML)
leaflet(data=data) %>%
addPolygons(fillOpacity = 0.7, dashArray = "3", color = "white", weight = 1.5,
fillColor = ~ pal(death_per_mil),
highlight = highlightOptions(
weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
addLegend("bottomleft", pal = pal, values = ~ death_per_mil, title = "deaths per million residents",
opacity = 1)
states <- st_read("tl_2015_us_state")
data <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
# join w/ shapefile
states <- left_join(x = states, y = data, by="GEOID")
data <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0)) %>%
left_join(states, by=c("Location of death (state)"="STUSPS")) %>%
mutate(death_per_mil=round(death_count/value*1000000), digits=1) %>%
st_as_sf() %>%
st_transform(crs = "+init=epsg:4326")
pal <- colorBin(palette = "magma", domain = data$death_per_mil, bins = 5, reverse = TRUE,
na.color = "#808080")
labels <- sprintf("<strong>%s</strong><br/>%g deaths / million residents",
data$NAME.x, data$death_per_mil) %>% lapply(htmltools::HTML)
leaflet(data=data) %>%
addPolygons(fillOpacity = 0.7, dashArray = "3", color = "white", weight = 1.5,
fillColor = ~ pal(death_per_mil),
highlight = highlightOptions(
weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto")) %>%
addLegend("bottomleft", pal = pal, values = ~ death_per_mil, title = "deaths per million residents",
opacity = 1)
states <- st_read("tl_2015_us_state")
pops <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
censusData <- read_csv("censusData.csv")
pops <- censusData %>%
filter(race == "Black") %>%
group_by(GEOID, NAME) %>%
summarise(value=sum(value, na.rm=TRUE))
deaths <- <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0))
mpv_data <- read_csv("geocodedMPVDataset.csv")
deaths <- mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0))
View(deaths)
mpv_data %>%
filter(`Victim's race` == "Black") %>%
group_by(`Location of death (state)`) %>%
summarise(death_count=n()) %>%
complete(`Location of death (state)`, fill = list(death_count = 0))
runApp()
runApp()
library(lubridate)
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n())
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n())
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n()) %>%
ggplot(aes(x='month(\`Date of injury resulting in death (month/day/year)\`, label = TRUE)',
y=count, group='year(\`Date of injury resulting in death (month/day/year)\`)')) +
geom_line()
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n()) %>%
ggplot(aes(x=factor('month(\`Date of injury resulting in death (month/day/year)\`, label = TRUE)'),
y=count, group='year(\`Date of injury resulting in death (month/day/year)\`)')) +
geom_line()
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n()) %>%
ggplot(aes(x=factor('month(\`Date of injury resulting in death (month/day/year)\`, label = TRUE)'),
y=count, group='year(\`Date of injury resulting in death (month/day/year)\`)',
colour='year(\`Date of injury resulting in death (month/day/year)\`)')) +
geom_line()
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n()) %>%
ggplot(aes(x=factor('month(\`Date of injury resulting in death (month/day/year)\`, label = TRUE)'),
y=count, group=factor('year(\`Date of injury resulting in death (month/day/year)\`)'),
colour=factor('year(\`Date of injury resulting in death (month/day/year)\`)'))) +
geom_line()
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n())
View(mpv_data)
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n()) %>%
ggplot(aes(x=factor('month(\`Date of injury resulting in death (month/day/year)\`, label = TRUE)'),
y=count,
colour=factor('year(\`Date of injury resulting in death (month/day/year)\`)'))) +
geom_line()
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n()) %>%
ggplot(aes(x=factor('month(\`Date of injury resulting in death (month/day/year)\`, label = TRUE)'),
y=count,
colour=factor('year(\`Date of injury resulting in death (month/day/year)\`)'))) +
geom_line()
mpv_data %>%
group_by(month(`Date of injury resulting in death (month/day/year)`, label=TRUE),
year(`Date of injury resulting in death (month/day/year)`)) %>%
summarise(count=n())
require(lubridate)
library(lubridate)
mpv_data <- mutate(mpv_data,
year=year(`Date of injury resulting in death (month/day/year)`),
month=month(`Date of injury resulting in death (month/day/year)`, label=TRUE))
View(mpv_data)
write_csv(mpv_data, "geocodedMPVDataset.csv")
mpv_data <- read_csv("geocodedMPVDataset.csv")
mpv_data %>%
group_by(year) %>%
arrange(`Date of injury resulting in death (month/day/year)`) %>%
mutate(Total = cumsum(n()))
test <- mpv_data %>%
group_by(year) %>%
arrange(`Date of injury resulting in death (month/day/year)`) %>%
mutate(Total = cumsum(n()))
View(test)
test <- mpv_data %>%
group_by(year) %>%
mutate(Total = cumsum(n()))
test <- mpv_data %>%
group_by(year, month) %>%
mutate(Total = cumsum(n()))
test <- mpv_data %>%
group_by(year, month) %>%
summarise(count=n())
mpv_data <- read_csv("geocodedMPVDataset.csv") %>%
month=month(`Date of injury resulting in death (month/day/year)`, label=TRUE)
mpv_data <- read_csv("geocodedMPVDataset.csv") %>%
mutate(month=month(`Date of injury resulting in death (month/day/year)`, label=TRUE))
test <- mpv_data %>%
group_by(year, month) %>%
summarise(count=n())
test <- mpv_data %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count))
mpv_data %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count)) %>%
ggplot(aes(x=month, y=Total, colour=year)) +
geom_line()
mpv_data %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count)) %>%
ggplot(aes(x=month, y=Total, group=year, colour=year)) +
geom_line()
mpv_data %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count)) %>%
ggplot(aes(x=month, y=Total, group=year, colour=year)) +
geom_line() +
theme_classic()
mpv_data %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count)) %>%
ggplot(aes(x=month, y=Total, group=year, colour=factor(year))) +
geom_line() +
theme_classic()
mpv_data %>%
filter(year >= max(year)-1) %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count)) %>%
ggplot(aes(x=month, y=Total, group=year, colour=factor(year))) +
geom_line() +
theme_classic()
mpv_data %>%
filter(year >= max(year)-1) %>%
group_by(year, month) %>%
summarise(count=n()) %>%
group_by(year) %>%
mutate(Total = cumsum(count)) %>%
ggplot(aes(x=month, y=Total, group=year, colour=factor(year))) +
geom_line() +
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
install.packages("secret")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state_names <- select(states, STUSPS, NAME)
state_names <- select(as.data.frame(states), STUSPS, NAME)
# load deaths data
mpv_data <- read_csv("geocodedMPVDataset.csv") %>%
mutate(month=month(`Date of injury resulting in death (month/day/year)`, label=TRUE)) %>%
left_join(state_names, by=c("Location of death (state)"="STUSPS"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c("", levels(mpv_data$NAME))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
