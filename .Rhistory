require(sparklyr)
sc <- spark_connect(master = "local")
listings_detailed <- fread("listings.csv.gz")
listings_detailed <- read_csv("listings.csv.gz")
reviews_detailed <- read_csv("reviews.csv.gz")
listings <- read_csv("listings.csv")
rm(listings)
reviews <- read_csv("reviews.csv")
rm(reviews)
sc <- spark_connect(master = "local")
listings <- read_csv("listings.csv.gz")
reviews <- read_csv("reviews.csv.gz")
calendar <- copy_to(sc, "calendar.csv.gz")
rm(sc)
neighbourhoods <- read_csv("neighbourhoods.csv")
library(tidyverse)
library(hrbrthemes)
library(ggalt)
library(forcats)
require(tidytext)
require(stringr)
require(sf)
listings <- read_csv("listings.csv.gz")
reviews <- read_csv("reviews.csv.gz")
neighbourhoods <- read_csv("neighbourhoods.csv")
neighbourhoods_geojson <- read_sf("neighbourhoods.geojson")
rm(neighbourhoods)
neighbourhoods <- read_sf("neighbourhoods.geojson")
rm(neighbourhoods_geojson)
sapply(reviews, function(x) sum(is.na(x)))
listings$price <- as.numeric(sub("\\$","", listings$price))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), as.numeric(sub("\\$","")))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), as.numeric(sub("\\$","", ...)))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), as.numeric(str_replace("\\$","")))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), str_replace("\\$",""))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), str_replace(., "\\$",""))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), str_replace(..., "\\$",""))
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), str_replace(, "\\$",""))
listings <- read_csv("listings.csv.gz")
listings$price <- as.numeric(str_replace(listings$price, "\\$",""))
listings$weekly_price <- as.numeric(str_replace(listings$weekly_price, "\\$",""))
listings$monthly_price <- as.numeric(str_replace(listings$monthly_price, "\\$",""))
require(quantmod)
unique(listings$last_scraped)
rate <- getFX("GBP/USD", from="2017-03-05", to="2016-03-04")
getFX("GBP/USD", from="2017-03-05", to="2016-03-04")
min(listings$last_scraped)
rate <- getFX("GBP/USD", from=min(listings$last_scraped), to=max(listings$last_scraped))
rm(rate)
GBPUSD
GBPUSD[, 1]
GBPUSD[2 , 1]
[2 , 2]
GBPUSD[2 , 2]
GBPUSD[2 , 1]
as.numeric(GBPUSD[2 , 1])
listings <- mutate_at(listings, c("price", "weekly_price", "monthly_price"), x*as.numeric(GBPUSD[2 , 1]))
listings <- mutate(listings,
price=price*as.numeric(GBPUSD[2 , 1]))
getFX("USD/GBP", from=min(listings$last_scraped), to=max(listings$last_scraped))
View(GBPUSD)
View(USDGBP)
rm(GBPUSD)
listings <- read_csv("listings.csv.gz")
listings$price <- as.numeric(str_replace(listings$price, "\\$",""))
listings$weekly_price <- as.numeric(str_replace(listings$weekly_price, "\\$",""))
listings$monthly_price <- as.numeric(str_replace(listings$monthly_price, "\\$",""))
listings <- mutate(listings,
price=price*as.numeric(USDGBP[2 , 1]),
weekly_price=weekly_price*as.numeric(USDGBP[2 , 1]),
monthly_price=monthly_price*as.numeric(USDGBP[2 , 1]))
listings <- read_csv("listings.csv.gz")
listings$price <- as.numeric(str_replace(listings$price, "\\$",""))
listings$weekly_price <- as.numeric(str_replace(listings$weekly_price, "\\$",""))
listings$monthly_price <- as.numeric(str_replace(listings$monthly_price, "\\$",""))
listings$security_deposit <- as.numeric(str_replace(listings$security_deposit, "\\$",""))
listings$extra_people <- as.numeric(str_replace(listings$extra_people, "\\$",""))
listings <- mutate(listings,
price=price*as.numeric(USDGBP[2 , 1]),
weekly_price=weekly_price*as.numeric(USDGBP[2 , 1]),
monthly_price=monthly_price*as.numeric(USDGBP[2 , 1]),
security_deposit=security_deposit*as.numeric(USDGBP[2 , 1]),
extra_people=extra_people*as.numeric(USDGBP[2 , 1]))
install.packages("tidycensus")
rm(USDGBP)
View(listings)
listings <- read_csv("listings.csv.gz")
#convert prices to numeric
listings$price <- as.numeric(str_replace(listings$price, "\\$",""))
listings$weekly_price <- as.numeric(str_replace(listings$weekly_price, "\\$",""))
listings$monthly_price <- as.numeric(str_replace(listings$monthly_price, "\\$",""))
listings$security_deposit <- as.numeric(str_replace(listings$security_deposit, "\\$",""))
listings$extra_people <- as.numeric(str_replace(listings$extra_people, "\\$",""))
#currency conversion
getFX("USD/GBP", from=min(listings$last_scraped), to=max(listings$last_scraped))
listings <- mutate(listings,
price=round(price*as.numeric(USDGBP[2 , 1])),
weekly_price=round(weekly_price*as.numeric(USDGBP[2 , 1])),
monthly_price=round(monthly_price*as.numeric(USDGBP[2 , 1])),
security_deposit=round(security_deposit*as.numeric(USDGBP[2 , 1])),
extra_people=round(extra_people*as.numeric(USDGBP[2 , 1])))
rm(USDGBP)
listings <- read_csv("listings.csv.gz")
#convert prices to numeric
listings$price <- as.numeric(str_replace(listings$price, "\\$",""))
listings$weekly_price <- as.numeric(str_replace(listings$weekly_price, "\\$",""))
listings$monthly_price <- as.numeric(str_replace(listings$monthly_price, "\\$",""))
listings$security_deposit <- as.numeric(str_replace(listings$security_deposit, "\\$",""))
listings$extra_people <- as.numeric(str_replace(listings$extra_people, "\\$",""))
listings$cleaning_fee <- as.numeric(str_replace(listings$cleaning_fee, "\\$",""))
#currency conversion
getFX("USD/GBP", from=min(listings$last_scraped), to=max(listings$last_scraped))
listings <- mutate(listings,
price=round(price*as.numeric(USDGBP[2 , 1])),
weekly_price=round(weekly_price*as.numeric(USDGBP[2 , 1])),
monthly_price=round(monthly_price*as.numeric(USDGBP[2 , 1])),
security_deposit=round(security_deposit*as.numeric(USDGBP[2 , 1])),
extra_people=round(extra_people*as.numeric(USDGBP[2 , 1])),
cleaning_fee=round(cleaning_fee*as.numeric(USDGBP[2 , 1])))
rm(USDGBP)
test <- readxl::read_excel("https://files.datapress.com/london/dataset/uk-house-price-index/2017-06-08T08:45:06.39/UK%20House%20price%20index-v2.xls")
library(readxl)
house_prices <- read_excel("UK House price index-v2.xls", sheet = "Average price")
View(house_prices)
knitr::opts_chunk$set(cache=TRUE, echo = TRUE, tidy = TRUE, warning = FALSE, message = FALSE, out.width = '100%', dpi = 180, echo = FALSE)
library(tidyverse)
library(hrbrthemes)
library(ggalt)
library(forcats)
require(tidytext)
require(stringr)
require(sf)
require(quantmod)
library(readxl)
# read in airbnb data locally
listings <- read_csv("listings.csv.gz")
reviews <- read_csv("reviews.csv.gz")
neighbourhoods <- read_sf("neighbourhoods.geojson")
# read in house price data
house_prices <- read_excel("UK House price index-v2.xls", sheet = "Average price")
quantile(listings$price,
probs = seq(0, 1, 0.01),
na.rm = TRUE) #Median price around £90, upper quartile > 150
listings$price <- as.numeric(str_replace(listings$price, "\\$",""))
listings$weekly_price <- as.numeric(str_replace(listings$weekly_price, "\\$",""))
listings$monthly_price <- as.numeric(str_replace(listings$monthly_price, "\\$",""))
listings$security_deposit <- as.numeric(str_replace(listings$security_deposit, "\\$",""))
listings$extra_people <- as.numeric(str_replace(listings$extra_people, "\\$",""))
listings$cleaning_fee <- as.numeric(str_replace(listings$cleaning_fee, "\\$",""))
#currency conversion
getFX("USD/GBP", from=min(listings$last_scraped), to=max(listings$last_scraped))
listings <- mutate(listings,
price=round(price*as.numeric(USDGBP[2 , 1])),
weekly_price=round(weekly_price*as.numeric(USDGBP[2 , 1])),
monthly_price=round(monthly_price*as.numeric(USDGBP[2 , 1])),
security_deposit=round(security_deposit*as.numeric(USDGBP[2 , 1])),
extra_people=round(extra_people*as.numeric(USDGBP[2 , 1])),
cleaning_fee=round(cleaning_fee*as.numeric(USDGBP[2 , 1])))
rm(USDGBP)
quantile(listings$price,
probs = seq(0, 1, 0.01),
na.rm = TRUE) #Median price around £90, upper quartile > 150
View(house_prices)
listings <- mutate(listings, percentile=quantile(price, probs = seq(0, 1, 0.01),
na.rm = TRUE))
listings <- mutate(listings, percentile=cut(price, breaks = quantile(price, probs = seq(0, 1, 0.01),
na.rm = TRUE)))
listings <- mutate(listings, percentile=cut(price, breaks = quantile(price, probs = seq(0, 1, 0.01))))
listings <- mutate(listings, percentile=cut(price, breaks = quantile(price, probs = seq(0, 1, 0.01),
na.rm = TRUE)))
listings <- mutate(listings, percentile=ntile(price, 100))
listings <- mutate(listings, percentile=ntile(price, 100),
one_percent=ifelse(percentile==100, TRUE, FALSE))
listings_words <- listings %>%
select(id, description, price, price_uq, review_scores_accuracy, review_scores_rating) %>%
unnest_tokens(word, description) %>%
filter(!word %in% stop_words$word,
str_detect(word, "^[a-z']+$"))
listings_words <- listings %>%
select(id, description, price, percentile, one_percent, review_scores_accuracy, review_scores_rating) %>%
unnest_tokens(word, description) %>%
filter(!word %in% stop_words$word,
str_detect(word, "^[a-z']+$"))
listings_words %>%
group_by(word) %>%
summarise(count = n()) %>%
top_n(n = 20, wt = count) %>%
ggplot() +
geom_bar(mapping = aes(x=reorder(word, -count),
y=count),
stat="identity") +
coord_flip()
listings_words %>%
group_by(word) %>%
summarise(count = n()) %>%
top_n(n = 20, wt = count) %>%
ggplot() +
geom_bar(mapping = aes(x=reorder(word, -count),
y=count),
stat="identity") +
coord_flip()
leaflet(data = listings) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~longitude, ~latitude, radius = 0.2, fillOpacity = 0.5)
install.packages("leaflet")
library(leaflet)
leaflet(data = listings) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~longitude, ~latitude, radius = 0.2, fillOpacity = 0.5)
leaflet(data = listings) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~longitude, ~latitude, radius = 0.2, fillOpacity = 0.5)
ggplot(data = listings, aes(x=longitude, y=latitude)) +
geom_point()
ggplot(data = listings, aes(x=longitude, y=latitude)) +
geom_point(alpha=0.5)
ggplot(data = listings, aes(x=longitude, y=latitude)) +
geom_point(alpha=0.2)
ggplot(data = listings, aes(x=longitude, y=latitude)) +
geom_point(alpha=0.1)
ggplot(data = listings, aes(x=longitude, y=latitude)) +
geom_point(alpha=0.1) +
geom_polygon(data = neighbourhoods)
devtools::install_github("tidyverse/ggplot2")
library(shiny)
library(shinythemes)
library(tidyverse)
library(sf)
library(readxl)
library(leaflet)
library(tidycensus)
mpv_data <- read_csv("geocodedMPVDataset.csv")
setwd("~/Documents/R bobs/polMonitor")
mpv_data <- read_csv("geocodedMPVDataset.csv")
View(mpv_data)
View(mpv_data)
knitr::opts_chunk$set(cache=TRUE, echo = TRUE, tidy = TRUE, warning = FALSE, message = FALSE, out.width = '100%', dpi = 180, echo = FALSE)
# devtools::install_github("tidyverse/ggplot2", force=TRUE)
library(tidyverse)
library(hrbrthemes)
library(ggalt)
library(forcats)
library(tidytext)
library(stringr)
library(sf)
library(readxl)
library(leaflet)
library(ggmap)
library(tidycensus)
library(gridExtra)
# read in data locally
deaths <- read_excel("MPVDatasetDownload.xlsx", sheet = "2013-2017 Police Killings")
leaflet(data = deaths) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address)
rm(deaths)
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mpv_data <- read_csv("geocodedMPVDataset.csv") %>%
ungroup()
runApp()
runApp()
leaflet(data = mpv_data) %>% addTiles() %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address) %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
leaflet(data = mpv_data) %>% addTiles() %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address) %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
leaflet(data = mpv_data) %>% addTiles() %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address) %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
leaflet(data = mpv_data) %>% addTiles() %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mpv_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(mpv_data$`Cause of death`)
runApp()
runApp()
runApp()
runApp()
runApp()
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address)
runApp()
library(forcats)
unique(mpv_data$`Victim's age`)
mpv_data$`Victim's age` <- cut(mpv_data$`Victim's age`,
breaks = c(15, 34, 54, 74, Inf))
mpv_data$`Victim's age` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(15, 34, 54, 74, Inf))
# data
mpv_data <- read_csv("geocodedMPVDataset.csv")
# clean
mpv_data$`Victim's age` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(-Inf, 15, 34, 54, 74, Inf))
mpv_data <- read_csv("geocodedMPVDataset.csv")
# clean
mpv_data$`Victim's age` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf))
View(mpv_data)
mpv_data <- read_csv("geocodedMPVDataset.csv")
mpv_data$`Victim's age` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf))
str(mpv_data$`Victim's age`)
levels(mpv_data$`Victim's age`)
# data
mpv_data <- read_csv("geocodedMPVDataset.csv")
# clean
mpv_data$`Victim's age` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
View(mpv_data)
# data
mpv_data <- read_csv("geocodedMPVDataset.csv")
# clean
mpv_data$`Victim's age band` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
library(forcats)
mpv_data$`Victim's gender` <- as_factor(mpv_data$`Victim's gender`)
# data
mpv_data <- read_csv("geocodedMPVDataset.csv")
# clean
mpv_data$`Victim's age band` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
mpv_data$`Victim's gender` <- as_factor(mpv_data$`Victim's gender`)
runApp()
runApp()
runApp()
runApp()
runApp()
mpv_data["Victim's age"]
runApp()
runApp()
runApp()
runApp()
runApp()
mpv_data$`Victim's gender` <- as.factor(mpv_data$`Victim's gender`)
levels(mpv_data$`Victim's gender`)
mpv_data$`Victim's race` <- as.factor(mpv_data$`Victim's race`)
runApp()
runApp()
runApp()
colorFactor("RdYlBu", mpv_data["Victim's age"])
colorFactor("RdYlBu", mpv_data[["Victim's age"]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mpv_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter") %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter")
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter") %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
runApp()
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter")
leaflet(data = mpv_data) %>% addProviderTiles("CartoDB.DarkMatter") %>%
addCircleMarkers(~lon, ~lat, radius = 0.2, fillOpacity = 0.5, popup= ~address)
runApp()
sum(is.na(mpv_data$`Date of injury resulting in death (month/day/year)`))
missing_geocode <- filter(mpv_data, is.na(lon) | is.na(lat))
mpv_data <- filter(mpv_data, !is.na(lon) & !is.na(lat))
runApp()
runApp()
runApp()
runApp()
runApp()
mpv_data <- read_csv("geocodedMPVDataset.csv")
missing_geocode <- filter(mpv_data, is.na(lon) | is.na(lat))
mpv_data <- filter(mpv_data, !is.na(lon) & !is.na(lat)) %>%
ungroup()
install.packages("mapview")
runApp()
runApp()
runApp()
spec(...)
spec(mpv_data)
mpv_data <- read.csv("geocodedMPVDataset.csv")
runApp()
mpv_data <- read.csv("geocodedMPVDataset.csv")
missing_geocode <- filter(mpv_data, is.na(lon) | is.na(lat))
mpv_data <- filter(mpv_data, !is.na(lon) & !is.na(lat))
# clean
mpv_data$`Victim's age band` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
mpv_data$`Victim's gender` <- as.factor(mpv_data$`Victim's gender`)
mpv_data$`Victim's race` <- as.factor(mpv_data$`Victim's race`)
mpv_data <- read_csv("geocodedMPVDataset.csv")
missing_geocode <- filter(mpv_data, is.na(lon) | is.na(lat))
mpv_data <- filter(mpv_data, !is.na(lon) & !is.na(lat))
# clean
mpv_data$`Victim's age band` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
mpv_data$`Victim's gender` <- as.factor(mpv_data$`Victim's gender`)
mpv_data$`Victim's race` <- as.factor(mpv_data$`Victim's race`)
# data
mpv_data <- read_csv("geocodedMPVDataset.csv")
# clean
mpv_data$`Victim's age band` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
mpv_data$`Victim's gender` <- as.factor(mpv_data$`Victim's gender`)
mpv_data$`Victim's race` <- as.factor(mpv_data$`Victim's race`)
missing_geocode <- filter(mpv_data, is.na(lon) | is.na(lat))
mpv_data <- filter(mpv_data, !is.na(lon) & !is.na(lat))
runApp()
runApp()
library(mapview)
mapview(mpv_data)
library(sf)
mpv_data_sf <- sf(mpv_data)
mpv_data_sf <- st_sf(mpv_data)
runApp()
View(mpv_data)
runApp()
geocode("Q St & S 24th St, Omaha, NE 68107, USA")
geocode("Q St & S 24th St")
geocode("Downing St & E 29th Ave, Denver, CO 80205, USA")
View(mpv_data)
geocode("Downing St %26 E 29th Ave, Denver, CO 80205, USA")
geocode("Downing%20St%20%26%20E%2029th%20Ave,%20Denver,%20CO%2080205,%20USA")
# load -----------------------
require(readxl)
# download latest data
url <- "http://mappingpoliceviolence.org/s/MPVDatasetDownload-9pyl.xlsx"
download.file(url, destfile = "MPVDatasetDownload.xlsx")
# read data
deaths <- read_excel("MPVDatasetDownload.xlsx", sheet = "2013-2017 Police Killings")
rm(url)
deaths$address <- paste0(deaths$`Location of injury (address)`, ", ", deaths$`Location of death (city)`,
", ", deaths$`Location of death (state)`, " ", deaths$`Location of death (zip code)`, ", USA")
require(stringr)
deaths$address_searchable <- str_replace_all(deaths$address, " ", "%20")
View(deaths)
deaths$address_searchable <- str_replace_all(deaths$address, "&", "%26")
deaths$address_searchable <- str_replace_all(deaths$address, " ", "%20")
deaths$address_searchable <- str_replace_all(deaths$address_searchable, "&", "%26")
setwd("~/Documents/R bobs/polMonitor")
# pkgs
library(shiny)
library(shinythemes)
library(tidyverse)
library(sf)
library(leaflet)
library(tidycensus)
library(RColorBrewer)
library(forcats)
# load data
mpv_data <- read_csv("geocodedMPVDataset.csv")
# to remove
mpv_data$`Victim's age band` <- cut(as.numeric(mpv_data$`Victim's age`),
breaks = c(0, 15, 34, 54, 74, Inf),
labels = c("0-15", "16-34", "35-54", "55-74", "75+"))
# make factor vars
mpv_data$`Victim's gender` <- as.factor(mpv_data$`Victim's gender`)
mpv_data$`Victim's race` <- as.factor(mpv_data$`Victim's race`)
# df of missing geocodes
missing_geocode <- filter(mpv_data, is.na(lon) | is.na(lat))
# remove missing geocodes from original df
mpv_data <- filter(mpv_data, !is.na(lon) & !is.na(lat))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
